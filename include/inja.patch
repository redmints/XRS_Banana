diff --git a/single_include/inja/inja.hpp b/single_include/inja/inja.hpp
index 42dea1c..47bd130 100644
--- a/single_include/inja/inja.hpp
+++ b/single_include/inja/inja.hpp
@@ -3,7 +3,7 @@
 #ifndef INCLUDE_INJA_INJA_HPP_
 #define INCLUDE_INJA_INJA_HPP_
 
-#include <nlohmann/json.hpp>
+#include "../../../json/single_include/nlohmann/json.hpp"
 
 #if (defined(__cpp_exceptions) || defined(__EXCEPTIONS) || defined(_CPPUNWIND)) && !defined(INJA_NOEXCEPTION)
     #define INJA_THROW(exception) throw exception
@@ -24,7 +24,7 @@
 #include <sstream>
 #include <string>
 
-#include <nlohmann/json.hpp>
+#include "../../../json/single_include/nlohmann/json.hpp"
 
 // #include "config.hpp"
 // Copyright (c) 2019 Pantor. All rights reserved.
@@ -1797,7 +1797,7 @@ struct Token {
     Unknown,
     Eof,
   };
-  
+
   Kind kind {Kind::Unknown};
   nonstd::string_view text;
 
@@ -2315,7 +2315,7 @@ public:
 #include <string>
 #include <utility>
 
-#include <nlohmann/json.hpp>
+#include "../../../json/single_include/nlohmann/json.hpp"
 
 // #include "function_storage.hpp"
 
@@ -2755,7 +2755,7 @@ using TemplateStorage = std::map<std::string, Template>;
 // #include "utils.hpp"
 
 
-#include <nlohmann/json.hpp>
+#include "../../../json/single_include/nlohmann/json.hpp"
 
 namespace inja {
 
@@ -2882,7 +2882,7 @@ class Parser {
         // Functions
         } else if (peek_tok.kind == Token::Kind::LeftParen) {
           operator_stack.emplace(std::make_shared<FunctionNode>(static_cast<std::string>(tok.text), tok.text.data() - tmpl.content.c_str()));
-          function_stack.emplace(operator_stack.top().get(), current_paren_level);       
+          function_stack.emplace(operator_stack.top().get(), current_paren_level);
 
         // Variables
         } else {
@@ -3329,7 +3329,7 @@ public:
 #include <utility>
 #include <vector>
 
-#include <nlohmann/json.hpp>
+#include "../../../json/single_include/nlohmann/json.hpp"
 
 // #include "config.hpp"
 
@@ -3484,10 +3484,10 @@ class Renderer : public NodeVisitor  {
   void visit(const JsonNode& node) {
     if (json_additional_data.contains(node.ptr)) {
       json_eval_stack.push(&(json_additional_data[node.ptr]));
-    
+
     } else if (json_input->contains(node.ptr)) {
       json_eval_stack.push(&(*json_input)[node.ptr]);
-    
+
     } else {
       // Try to evaluate as a no-argument callback
       auto function_data = function_storage.find_function(node.name, 0);
